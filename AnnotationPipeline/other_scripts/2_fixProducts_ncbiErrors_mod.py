#This python script is adapted from Santangelo et al. 2023
# Python script to remap attributes and fix some issues flagged by NCBI
import os
import re
import gffutils

# Input file paths
gff_file = "1_Galeolaria_caespitosa_functional_ECfix_wLocusTags.gff"

# Output file path
output_gff = "2_Galeolaria_caespitosa_functional_productFix.gff3"
output_db = "Galeolaria_caespitosa_fixProducts.gffdb"

db = gffutils.create_db(gff_file, output_db, force = True)


gene_name_dict = {
    'PROFILIN4' : 'PFN4',
    'PEPTIDEN4(NACETYLBETAGLUCOSAMINYL)ASPARAGINE' : 'PNG1',
    'SEDOHEPTULOSE1' : 'SBPASE',
    'DELTA1PYRROLINE5CARBOXYLATE' : 'P5CS1',
    'PROFILIN1' : 'PFN1',
    'PROFILIN2' : 'PFN2',
    '3ISOPROPYLMALATE' : 'IMDH'
}

def fix_product(feature):
    # Get product based on feature type
    featuretype = feature.featuretype
    # mRNA has product as attribute
    if featuretype == 'mRNA':
        product = ','.join(feature.attributes['product'])
    # Have to get product from CDS's mRNA parent
    elif featuretype == 'CDS':
        mrna_parent = [f.id for f in db.parents(feature.id, featuretype='mRNA')][0]
        product = ','.join(db[mrna_parent].attributes['product'])

    # Get gene parent, which is required for some specific fixes
    gene_parent = [f.id for f in db.parents(feature.id, featuretype='gene')][0]

    # Initialize new_product with the original product
    new_product = product

    # Some simple string substitutions for common problems
    if re.search('\sGRAS$', product):
        new_product = 'Scarecrow-like 8'
    elif 'Belongs' in product:
        new_product = re.sub('Belongs to the ', '', product)
    elif 'proteins' in product:
        new_product = re.sub('(?<=\s)proteins$', 'protein', product)
    elif 'domains' in product:
        new_product = re.sub('(?<=\s)domains$', 'domain', product)
    elif 'AT3g18370/MYF24_8' in product:
        new_product = re.sub('AT3g18370/MYF24_8', 'C2 domain-containing protein', product)
    elif re.search('\sA[T|t][a-z0-9]{7}', product):
        new_product = re.sub('\sA[T|t][a-z0-9]{7}', '', product)
    elif 'YGL059W' in product:
        new_product = re.sub(' YGL059W', '', product)
    elif product == 'glutathione transferase activity':
        new_product = 'glutathione transferase'
    elif product == 'negative regulation of ubiquitin-protein transferase activity':
        new_product = 'uv-b-insensitive 4'
    elif product == 'Control of topological states of DNA by transient breakage and subsequent rejoining of DNA strands':
        new_product = 'DNA topoisomerase 2'
    elif 'and other' in product:
        new_product = re.sub('\(and other\)\s', '', product)
    elif re.search('Pseudo\s', product):
        new_product = re.sub('Pseudo\s', '', product)
    elif product == 'Short calmodulin-binding motif containing conserved Ile and Gln residues.':
        new_product = 'IQ-domain 7'
    elif product == 'Viral Genome polyprotein':
        new_product = 'asparagine--tRNA ligase'
    elif 'HOMOLOG' in product:
        new_product = re.sub('\sHOMOLOG', '', product)
    elif 'Allatostatins [Cleaved' in product:
        new_product = 'anthranilate synthase 2'
    elif 'ditrans,polycis-polyprenyl diphosphate synthase' in product:
        new_product = 'ditrans,polycis-polyprenyl diphosphate synthase'

    # Update product if present, create if not
    if 'product' in feature.attributes.keys():
        feature.attributes['product'][0] = new_product
    else:
        feature.attributes['product'] = [new_product]

    return feature


with open(output_gff, 'w') as fout:
    fout.write("##gff-version 3\n")
    for feat in db.all_features():
        
        if feat.featuretype == 'gene':
            # Remove incremental numbering of gene names generated by funannotate
            # Reassign as "gene" attribute
            if 'Name' in feat.attributes.keys():
                feat.attributes['gene'] = [re.sub('_\d+$', '', feat.attributes['Name'][0])]
                feat.attributes['gene'][0] = feat.attributes['gene'][0].upper()
                feat.attributes.pop('Name')
                # Fix verbose/incorect gene names
                gene_name_base = feat.attributes['gene'][0].split('_')[0]
                if gene_name_base in gene_name_dict.keys():
                    feat.attributes['gene'][0] = re.sub(re.escape(gene_name_base), 
                                                        gene_name_dict[gene_name_base], 
                                                        feat.attributes['gene'][0])         
                
        elif feat.featuretype == 'mRNA':
            # Assign transcript IDs
            locus_tag = [f.attributes['locus_tag'][0] for f in db.parents(feat.id, featuretype='gene')][0]
            transcript = feat.attributes['ID'][0].split('.')[1]
            feat.attributes['transcript_id'] = [f"mrna{transcript}.{locus_tag}"]
            # Fix and reassign product
            feat = fix_product(feat)
            
        elif feat.featuretype == 'CDS':
            # Assign protein IDs
            locus_tag = [f.attributes['locus_tag'][0] for f in db.parents(feat.id, featuretype='gene')][0]
            transcript = feat.attributes['Parent'][0].split('.')[1]
            feat.attributes['protein_id'] = [f"{transcript}.{locus_tag}"]
            # Get, fix, and assign product
            feat = fix_product(feat)
            # Assign EC Number to CDS features
            mrna_parent = [f.id for f in db.parents(feat.id, featuretype='mRNA')][0]
            if 'ec_number' in db[mrna_parent].attributes.keys():
                feat.attributes['ec_number'] = db[mrna_parent].attributes['ec_number']

        # Don't need exons in final GFF
        #elif feat.featuretype == 'exon':
            #continue
        
        fout.write(f"{str(feat)}\n")
        
os.remove(output_db)
